security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
        admin_provider:
            entity:
                class: App\Entity\AdminUser
                property: email
        customer_provider:
            id: App\Security\CustomerUserProvider
        supplier_provider:
            id: App\Security\SupplierUserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        # JWT Authentication for Customer API endpoints
        customer_api:
            pattern: ^/api/customer
            stateless: true
            provider: customer_provider
            jwt: ~
            
        # JWT Authentication for Supplier API endpoints  
        supplier_api:
            pattern: ^/api/supplier
            stateless: true
            provider: supplier_provider
            jwt: ~
            
        # General API Platform endpoints
        api:
            pattern: ^/api/
            stateless: true
            provider: admin_provider
            jwt: ~
            
        admin:
            pattern: ^/admin
            provider: admin_provider
            custom_authenticator: App\Security\AdminAuthenticator
            access_denied_handler: App\Security\AdminAccessDeniedHandler
            logout:
                path: admin_logout
                target: admin_login
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 week
        main:
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Admin access control
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: [ROLE_ADMIN, ROLE_MANAGER, ROLE_OPERATOR] }
        
        # Customer API access control
        - { path: ^/api/customer/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/customer/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/customer/password-recovery, roles: PUBLIC_ACCESS }
        - { path: ^/api/customer/password-reset, roles: PUBLIC_ACCESS }
        - { path: ^/api/customer, roles: ROLE_CUSTOMER }
        
        # Supplier API access control
        - { path: ^/api/supplier/register, roles: PUBLIC_ACCESS }
        - { path: ^/api/supplier/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/supplier/password-recovery, roles: PUBLIC_ACCESS }
        - { path: ^/api/supplier/password-reset, roles: PUBLIC_ACCESS }
        - { path: ^/api/supplier, roles: ROLE_SUPPLIER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
